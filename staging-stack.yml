AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  ApplicationSingleInstanceCondition:
    Fn::Equals:
    - Ref: ApplicationDesiredCount
    - 1
  DatabaseSingleAZCondition:
    Fn::Equals:
    - Ref: DatabaseMultiAZ
    - 'false'
Description: Staging stack for local env
Mappings: {}
Outputs:
  PublicLoadBalancerUrl:
    Description: Public Load Balancer URL
    Value:
      Fn::Sub: ${PublicLoadBalancer.DNSName}
Parameters:
  ApplicationDesiredCount:
    Default: 1
    Description: The desired number of application instances
    Type: Number
  ApplicationDnsName:
    Description: Hostname portion of application FQDN
    Type: String
  ApplicationImageId:
    Description: Amazon machine image ID
    Type: String
  ApplicationInstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    Default: t2.micro
    Description: Application EC2 instance type
    Type: String
  ApplicationKeyName:
    Description: EC2 key pair for SSH access
    Type: String
  DatabaseInstanceType:
    AllowedValues:
    - db.t2.micro
    - db.t2.small
    - db.t2.medium
    Default: db.t2.micro
    Description: Database instance type
    Type: String
  DatabaseMultiAZ:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
    Description: Enable or disable RDS Multi Availability Zone
    Type: String
  DatabaseName:
    Description: Database name
    Type: String
  DatabasePassword:
    Description: Database password
    NoEcho: true
    Type: String
  DatabaseUsername:
    Description: Database username
    Type: String
  EcsTaskRunnerVersion:
    Description: S3 file version of the Lambda Ecs Task Runner function
    Type: String
  LogRetention:
    AllowedValues:
    - 1
    - 3
    - 5
    - 7
    - 14
    - 30
    - 60
    - 90
    - 120
    - 150
    - 180
    - 365
    - 400
    - 545
    - 731
    - 1827
    - 3653
    Default: 3
    Description: Log Retention (Days)
    Type: Number
  MicrotraderAuditHttpPort:
    Description: Container port for Microtrader Audit Service
    Type: Number
  MicrotraderDashboardHttpPort:
    Description: Container port for Microtrader Dashboard
    Type: Number
  MicrotraderImage:
    Default: 713475812120.dkr.ecr.us-east-1.amazonaws.com/docker-release
    Description: Microtrader Docker Image Registry/Organization Base URI
    Type: String
  MicrotraderImageTag:
    Default: latest
    Description: Microtrader Docker Image Application Tag
    Type: String
  MicrotraderQuoteHttpPort:
    Description: Container port for Microtrader Quote Service
    Type: Number
  VpcName:
    Default: Default
    Description: Name of the target VPC
    Type: String
Resources:
  ApplicationAutoscaling:
    CreationPolicy:
      ResourceSignal:
        Count:
          Ref: ApplicationDesiredCount
        Timeout: PT15M
    DependsOn:
    - DmesgLogGroup
    - MessagesLogGroup
    - DockerLogGroup
    - EcsInitLogGroup
    - EcsAgentLogGroup
    Properties:
      DesiredCapacity:
        Ref: ApplicationDesiredCount
      LaunchConfigurationName:
        Ref: ApplicationAutoscalingLaunchConfiguration
      MaxSize: 4
      MinSize: 0
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value:
          Fn::Sub: ${AWS::StackName}-ApplicationAutoscaling-instance
      - Key: hazelcast:group
        PropagateAtLaunch: 'true'
        Value:
          Ref: ApplicationCluster
      VPCZoneIdentifier:
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}MediumSubnetA
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}MediumSubnetB
    Type: AWS::AutoScaling::AutoScalingGroup
  ApplicationAutoscalingInstanceProfile:
    Properties:
      Roles:
      - Ref: ApplicationAutoscalingInstanceRole
    Type: AWS::IAM::InstanceProfile
  ApplicationAutoscalingInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:RegisterContainerInstance
            - ecs:DeregisterContainerInstance
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ApplicationCluster}
          - Action:
            - ecs:DiscoverPollEndpoint
            - ecs:Submit*
            - ecs:Poll
            - ecs:StartTelemetrySession
            Effect: Allow
            Resource: '*'
          - Action:
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: ECSContainerInstancePolicy
      - PolicyDocument:
          Statement:
            Action: ec2:DescribeInstances
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: HazelcastClusterDiscoveryPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*
          Version: '2012-10-17'
        PolicyName: CloudwatchLogsPolicy
    Type: AWS::IAM::Role
  ApplicationAutoscalingLaunchConfiguration:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: sh init-Run.sh
              cwd: /home/ec2-user
              env:
                AUTOSCALING_GROUP: ApplicationAutoscaling
                AWS_DEFAULT_REGION:
                  Ref: AWS::Region
                DOCKER_NETWORK_MODE: host
                ECS_CLUSTER:
                  Ref: ApplicationCluster
                PROXY_URL:
                  Fn::ImportValue:
                    Fn::Sub: ${VpcName}ProxyUrl
                STACK_NAME:
                  Ref: AWS::StackName
    Properties:
      IamInstanceProfile:
        Ref: ApplicationAutoscalingInstanceProfile
      ImageId:
        Ref: ApplicationImageId
      InstanceType:
        Ref: ApplicationInstanceType
      KeyName:
        Ref: ApplicationKeyName
      SecurityGroups:
      - Ref: ApplicationAutoscalingSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -xe

              '
            - '/opt/aws/bin/cfn-init -v '
            - '    --stack '
            - Ref: AWS::StackName
            - '    --resource ApplicationAutoscalingLaunchConfiguration '
            - '    --region '
            - Ref: AWS::Region
            - '    --http-proxy '
            - Fn::ImportValue:
                Fn::Sub: ${VpcName}ProxyUrl
            - '    --https-proxy '
            - Fn::ImportValue:
                Fn::Sub: ${VpcName}ProxyUrl
            - '

              '
            - '/opt/aws/bin/cfn-signal -e $? --stack '
            - Ref: AWS::StackName
            - '    --resource ApplicationAutoscaling '
            - '    --region '
            - Ref: AWS::Region
            - '    --http-proxy '
            - Fn::ImportValue:
                Fn::Sub: ${VpcName}ProxyUrl
            - '    --https-proxy '
            - Fn::ImportValue:
                Fn::Sub: ${VpcName}ProxyUrl
            - '

              '
    Type: AWS::AutoScaling::LaunchConfiguration
  ApplicationAutoscalingSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Application Autoscaling Security Group
      SecurityGroupEgress:
      - CidrIp:
          Fn::Join:
          - ''
          - - Fn::ImportValue:
                Fn::Sub: ${VpcName}VpcDnsServer
            - /32
        FromPort: 53
        IpProtocol: udp
        ToPort: 53
      - DestinationSecurityGroupId:
          Fn::ImportValue:
            Fn::Sub: ${VpcName}ProxySecurityGroup
        FromPort: 3128
        IpProtocol: tcp
        ToPort: 3128
      SecurityGroupIngress:
      - CidrIp:
          Fn::ImportValue:
            Fn::Sub: ${VpcName}VpcCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
    Type: AWS::EC2::SecurityGroup
  ApplicationAutoscalingToApplicationDatabaseEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: ApplicationDatabaseSecurityGroup
      FromPort: 3306
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      ToPort: 3306
    Type: AWS::EC2::SecurityGroupEgress
  ApplicationAutoscalingToApplicationDatabaseIngress:
    Properties:
      FromPort: 3306
      GroupId:
        Ref: ApplicationDatabaseSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      ToPort: 3306
    Type: AWS::EC2::SecurityGroupIngress
  ApplicationCluster:
    Type: AWS::ECS::Cluster
  ApplicationDatabase:
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: 10
      AvailabilityZone:
        Fn::If:
        - DatabaseSingleAZCondition
        - Fn::Sub: ${AWS::Region}a
        - Ref: AWS::NoValue
      DBInstanceClass:
        Ref: DatabaseInstanceType
      DBName:
        Ref: DatabaseName
      DBSubnetGroupName:
        Ref: ApplicationDatabaseSubnetGroup
      Engine: MySQL
      EngineVersion: 5.7
      MasterUserPassword:
        Fn::Sub: ${DatabaseSecret.Value}
      MasterUsername:
        Ref: DatabaseUsername
      MultiAZ:
        Ref: DatabaseMultiAZ
      StorageType: gp2
      VPCSecurityGroups:
      - Ref: ApplicationDatabaseSecurityGroup
    Type: AWS::RDS::DBInstance
  ApplicationDatabaseSecurityGroup:
    Properties:
      GroupDescription: Application Database Security Group
      SecurityGroupEgress:
      - CidrIp: 192.0.2.0/32
        FromPort: -1
        IpProtocol: icmp
        ToPort: -1
      SecurityGroupIngress: []
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-ApplicationDatabaseSecurityGroup
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
    Type: AWS::EC2::SecurityGroup
  ApplicationDatabaseSubnetGroup:
    Properties:
      DBSubnetGroupDescription: Application Database Subnet Group
      SubnetIds:
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}HighSubnetA
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}HighSubnetB
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-ApplicationDatabaseSubnetGroup
    Type: AWS::RDS::DBSubnetGroup
  ApplicationDnsRecord:
    Properties:
      Comment:
        Fn::Sub: ${AWS::StackName} Application Record
      HostedZoneName:
        Fn::Join:
        - ''
        - - Fn::ImportValue:
              Fn::Sub: ${VpcName}VpcDomain
          - .
      Name:
        Fn::Join:
        - ''
        - - Fn::Sub: ${ApplicationDnsName}.
          - Fn::ImportValue:
              Fn::Sub: ${VpcName}VpcDomain
      ResourceRecords:
      - Fn::Sub: ${ApplicationLoadBalancer.DNSName}
      TTL: '300'
      Type: CNAME
    Type: AWS::Route53::RecordSet
  ApplicationLoadBalancer:
    Properties:
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: 'false'
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Scheme: internal
      SecurityGroups:
      - Ref: ApplicationLoadBalancerSecurityGroup
      Subnets:
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}MediumSubnetA
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}MediumSubnetB
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ApplicationLoadBalancerHttpListener:
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: QuoteServiceTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ApplicationLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Application Load Balancer Security Group
      SecurityGroupEgress: []
      SecurityGroupIngress: []
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-PublicLoadBalancerSecurityGroup
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
    Type: AWS::EC2::SecurityGroup
  ApplicationLoadBalancerToMicrotraderAuditEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      FromPort:
        Ref: MicrotraderAuditHttpPort
      GroupId:
        Ref: ApplicationLoadBalancerSecurityGroup
      IpProtocol: tcp
      ToPort:
        Ref: MicrotraderAuditHttpPort
    Type: AWS::EC2::SecurityGroupEgress
  ApplicationLoadBalancerToMicrotraderAuditIngress:
    Properties:
      FromPort:
        Ref: MicrotraderAuditHttpPort
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: ApplicationLoadBalancerSecurityGroup
      ToPort:
        Ref: MicrotraderAuditHttpPort
    Type: AWS::EC2::SecurityGroupIngress
  ApplicationLoadBalancerToMicrotraderQuoteEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      FromPort:
        Ref: MicrotraderQuoteHttpPort
      GroupId:
        Ref: ApplicationLoadBalancerSecurityGroup
      IpProtocol: tcp
      ToPort:
        Ref: MicrotraderQuoteHttpPort
    Type: AWS::EC2::SecurityGroupEgress
  ApplicationLoadBalancerToMicrotraderQuoteIngress:
    Properties:
      FromPort:
        Ref: MicrotraderQuoteHttpPort
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: ApplicationLoadBalancerSecurityGroup
      ToPort:
        Ref: MicrotraderQuoteHttpPort
    Type: AWS::EC2::SecurityGroupIngress
  AuditService:
    DependsOn:
    - ApplicationAutoscaling
    - AuditServiceLogGroup
    - ApplicationLoadBalancerHttpListener
    - ApplicationDatabase
    Properties:
      Cluster:
        Ref: ApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent:
          Fn::If:
          - ApplicationSingleInstanceCondition
          - 0
          - 50
      DesiredCount:
        Ref: ApplicationDesiredCount
      LoadBalancers:
      - ContainerName: audit
        ContainerPort:
          Ref: MicrotraderAuditHttpPort
        TargetGroupArn:
          Ref: AuditServiceTargetGroup
      Role:
        Ref: EcsServiceRole
      TaskDefinition:
        Ref: AuditTaskDefinition
    Type: AWS::ECS::Service
  AuditServiceListenerRule:
    Properties:
      Actions:
      - TargetGroupArn:
          Ref: AuditServiceTargetGroup
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - Fn::Sub: /audit/*
      ListenerArn:
        Ref: ApplicationLoadBalancerHttpListener
      Priority: 1
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  AuditServiceLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/AuditService/audit
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  AuditServiceTargetGroup:
    Properties:
      HealthCheckPath: /audit/
      Port:
        Ref: MicrotraderAuditHttpPort
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 30
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  AuditTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - java
        - -jar
        - /app/app.jar
        - -server
        - -cluster
        - -Dvertx.hazelcast.config=/app/conf/cluster.xml
        - -cluster-port=15704
        Cpu: 200
        Environment:
        - Name: SSM_SECRETS
          Value:
            Fn::Sub: /${AWS::StackName}/database/password /${AWS::StackName}/cluster/password
        - Name: SSM_VERSIONS
          Value:
            Fn::Sub: ${DatabaseSecret} ${ClusterSecret}
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
        - Name: HTTPS_PROXY
          Value:
            Fn::ImportValue:
              Fn::Sub: ${VpcName}ProxyUrl
        - Name: JDBC_URL
          Value:
            Fn::Sub: jdbc:mysql://${ApplicationDatabase.Endpoint.Address}/${DatabaseName}?useSSL=false
        - Name: JDBC_USER
          Value:
            Ref: DatabaseUsername
        - Name: JDBC_DRIVERCLASS
          Value: com.mysql.jdbc.Driver
        - Name: HTTP_PORT
          Value:
            Ref: MicrotraderAuditHttpPort
        - Name: HTTP_ROOT
          Value: /audit/
        - Name: HTTP_HOST
          Value:
            Ref: ApplicationDnsRecord
        - Name: HTTP_PUBLIC_PORT
          Value: 80
        - Name: CLUSTER_GROUP_NAME
          Value:
            Ref: ApplicationCluster
        - Name: CLUSTER_AWS_ENABLED
          Value: 'true'
        - Name: CLUSTER_AWS_REGION
          Value:
            Ref: AWS::Region
        - Name: CLUSTER_AWS_IAM_ROLE
          Value: DEFAULT
        - Name: CLUSTER_AWS_TAG_KEY
          Value: hazelcast:group
        - Name: CLUSTER_AWS_TAG_VALUE
          Value:
            Ref: ApplicationCluster
        - Name: JAVA_TOOL_OPTIONS
          Value:
            Fn::Join:
            - ''
            - - ' -Dhttp.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttp.proxyPort=3128'
              - ' -Dhttps.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttps.proxyPort=3128'
              - ' -Dhttp.nonProxyHosts=''*.'
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}VpcDomain
              - '|169.254.*|localhost|127.*|[::1]'''
        Image:
          Fn::Sub: ${MicrotraderImage}/microtrader-audit:${MicrotraderImageTag}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/AuditService/audit
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker
        Memory: 800
        MemoryReservation: 195
        Name: audit
        PortMappings:
        - ContainerPort:
            Ref: MicrotraderAuditHttpPort
        - ContainerPort: 15704
      NetworkMode: host
      TaskRoleArn:
        Fn::Sub: ${SecretsTaskDefRole.Arn}
    Type: AWS::ECS::TaskDefinition
  ClusterSecret:
    Properties:
      Key: CLUSTER_GROUP_PASSWORD
      KmsKeyId:
        Fn::ImportValue: CfnMasterKey
      Name:
        Fn::Sub: /${AWS::StackName}/cluster/password
      ServiceToken:
        Fn::Sub: ${SecretsProvisioner.Arn}
      Trigger: 1
    Type: AWS::CloudFormation::CustomResource
  DashboardService:
    DependsOn:
    - QuoteService
    - AuditService
    - PortfolioService
    - ApplicationAutoscaling
    - DashboardServiceLogGroup
    - PublicLoadBalancerHttpListener
    Properties:
      Cluster:
        Ref: ApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent:
          Fn::If:
          - ApplicationSingleInstanceCondition
          - 0
          - 50
      DesiredCount:
        Ref: ApplicationDesiredCount
      LoadBalancers:
      - ContainerName: dashboard
        ContainerPort:
          Ref: MicrotraderDashboardHttpPort
        TargetGroupArn:
          Ref: DashboardServiceTargetGroup
      Role:
        Ref: EcsServiceRole
      TaskDefinition:
        Ref: DashboardTaskDefinition
    Type: AWS::ECS::Service
  DashboardServiceLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/DashboardService/dashboard
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  DashboardServiceTargetGroup:
    Properties:
      Port:
        Ref: MicrotraderDashboardHttpPort
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 30
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  DashboardTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - java
        - -jar
        - /app/app.jar
        - -server
        - -cluster
        - -Dvertx.hazelcast.config=/app/conf/cluster.xml
        - -cluster-port=15702
        Cpu: 200
        Environment:
        - Name: HTTP_PORT
          Value:
            Ref: MicrotraderDashboardHttpPort
        - Name: SSM_SECRETS
          Value:
            Fn::Sub: /${AWS::StackName}/cluster/password
        - Name: SSM_VERSIONS
          Value:
            Fn::Sub: ${ClusterSecret}
        - Name: HTTPS_PROXY
          Value:
            Fn::ImportValue:
              Fn::Sub: ${VpcName}ProxyUrl
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
        - Name: CLUSTER_GROUP_NAME
          Value:
            Ref: ApplicationCluster
        - Name: CLUSTER_AWS_ENABLED
          Value: 'true'
        - Name: CLUSTER_AWS_REGION
          Value:
            Ref: AWS::Region
        - Name: CLUSTER_AWS_IAM_ROLE
          Value: DEFAULT
        - Name: CLUSTER_AWS_TAG_KEY
          Value: hazelcast:group
        - Name: CLUSTER_AWS_TAG_VALUE
          Value:
            Ref: ApplicationCluster
        - Name: JAVA_TOOL_OPTIONS
          Value:
            Fn::Join:
            - ''
            - - ' -Xmx672m -XX:MaxMetaspaceSize=128m'
              - ' -Dhttp.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttp.proxyPort=3128'
              - ' -Dhttps.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttps.proxyPort=3128'
              - ' -Dhttp.nonProxyHosts=''*.'
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}VpcDomain
              - '|169.254.*|localhost|127.*|[::1]'''
        Image:
          Fn::Sub: ${MicrotraderImage}/microtrader-dashboard:${MicrotraderImageTag}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/DashboardService/dashboard
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker
        Memory: 800
        MemoryReservation: 195
        Name: dashboard
        PortMappings:
        - ContainerPort:
            Ref: MicrotraderDashboardHttpPort
        - ContainerPort: 15702
      NetworkMode: host
      TaskRoleArn:
        Fn::Sub: ${SecretsTaskDefRole.Arn}
    Type: AWS::ECS::TaskDefinition
  DatabaseSecret:
    Properties:
      Key: JDBC_PASSWORD
      KmsKeyId:
        Fn::ImportValue: CfnMasterKey
      Name:
        Fn::Sub: /${AWS::StackName}/database/password
      ServiceToken:
        Fn::Sub: ${SecretsProvisioner.Arn}
      Value:
        Ref: DatabasePassword
    Type: AWS::CloudFormation::CustomResource
  DmesgLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/dmesg
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  DockerLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/docker
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  EcsAgentLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-agent
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  EcsInitLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-init
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  EcsServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
    Type: AWS::IAM::Role
  EcsTaskRunner:
    DependsOn:
    - EcsTaskRunnerLogGroup
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: ${AWS::AccountId}-cfnlambda
        S3Key: ecsTasks.zip
        S3ObjectVersion:
          Ref: EcsTaskRunnerVersion
      Description: Custom ECS Task runner for Task Def
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ecsTasks
      Handler: ecs_tasks.handler
      MemorySize: 128
      Role:
        Fn::Sub: ${EcsTaskRunnerRole.Arn}
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Lambda::Function
  EcsTaskRunnerLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-cfnlambda
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  EcsTaskRunnerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-ecsTasks
            Sid: InvokeSelf
          - Action:
            - ecs:RunTask
            - ecs:DescribeTasks
            - ecs:ListContainerInstances
            - ecs:StopTask
            - ecs:ListTasks
            - ecs:StartTask
            - ecs:DescribeContainerInstances
            - ecs:ListTaskDefinitions
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ApplicationCluster}
            Effect: Allow
            Resource: '*'
            Sid: EcsTaskLambdaFunction
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ecsTasks:*:*
            Sid: ManagedLambdaLogs
          Version: '2012-10-17'
        PolicyName: EcsTaskRunnerPermissions
    Type: AWS::IAM::Role
  MessagesLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/messages
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  MicrotraderClusterDiscoverEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      FromPort: 5701
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      ToPort: 5710
    Type: AWS::EC2::SecurityGroupEgress
  MicrotraderClusterDiscoverIngress:
    Properties:
      FromPort: 5701
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      ToPort: 5710
    Type: AWS::EC2::SecurityGroupIngress
  MicrotraderEventBusEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      FromPort: 15701
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      ToPort: 15704
    Type: AWS::EC2::SecurityGroupEgress
  MicrotraderEventBusIngress:
    Properties:
      FromPort: 15701
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      ToPort: 15704
    Type: AWS::EC2::SecurityGroupIngress
  MicrotraderToApplicationLoadBalancerEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: ApplicationLoadBalancerSecurityGroup
      FromPort: 80
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      ToPort: 80
    Type: AWS::EC2::SecurityGroupEgress
  MicrotraderToApplicationLoadBalancerIngress:
    Properties:
      FromPort: 80
      GroupId:
        Ref: ApplicationLoadBalancerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  MigrateLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/Task/Migrate
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  MigrateTask:
    DependsOn:
    - ApplicationAutoscaling
    - ApplicationDatabase
    Properties:
      Cluster:
        Ref: ApplicationCluster
      RunOnUpdate: 'true'
      ServiceToken:
        Fn::Sub: ${EcsTaskRunner.Arn}
      TaskDefinition:
        Ref: MigrateTaskDefinition
    Type: AWS::CloudFormation::CustomResource
  MigrateTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - java
        - -cp
        - /app/app.jar
        - com.pluralsight.dockerproductionaws.admin.Migrate
        Cpu: 200
        Environment:
        - Name: JDBC_URL
          Value:
            Fn::Sub: jdbc:mysql://${ApplicationDatabase.Endpoint.Address}/${DatabaseName}?useSSL=false
        - Name: JDBC_USER
          Value:
            Ref: DatabaseUsername
        - Name: HTTPS_PROXY
          Value:
            Fn::ImportValue:
              Fn::Sub: ${VpcName}ProxyUrl
        - Name: SSM_SECRETS
          Value:
            Fn::Sub: /${AWS::StackName}/database/password
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
        - Name: JDBC_DRIVERCLASS
          Value: com.mysql.jdbc.Driver
        - Name: DB_MIGRATIONS_LOCATION
          Value: db/mysql
        - Name: JAVA_TOOL_OPTIONS
          Value:
            Fn::Join:
            - ''
            - - ' -Dhttp.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttp.proxyPort=3128'
              - ' -Dhttps.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttps.proxyPort=3128'
              - ' -Dhttp.nonProxyHosts=''*.'
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}VpcDomain
              - '|169.254.*|localhost|127.*|[::1]'''
        Image:
          Fn::Sub: ${MicrotraderImage}/microtrader-audit:${MicrotraderImageTag}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/Task/Migrate
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker
        Memory: 700
        MemoryReservation: 195
        Name: Migrate
      NetworkMode: host
      TaskRoleArn:
        Fn::Sub: ${SecretsTaskDefRole.Arn}
    Type: AWS::ECS::TaskDefinition
  PortfolioService:
    DependsOn:
    - AuditService
    - ApplicationAutoscaling
    - PortfolioServiceLogGroup
    Properties:
      Cluster:
        Ref: ApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      TaskDefinition:
        Ref: PortfolioTaskDefinition
    Type: AWS::ECS::Service
  PortfolioServiceLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/PortfolioService/portfolio
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  PortfolioTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - java
        - -jar
        - /app/app.jar
        - -server
        - -cluster
        - -Dvertx.hazelcast.config=/app/conf/cluster.xml
        - -cluster-port=15703
        Cpu: 200
        Environment:
        - Name: $SSM_SECRETS
          Value:
            Fn::Sub: /${AWS::StackName}/cluster/password
        - Name: $SSM_VERSIONS
          Value:
            Fn::Sub: ${ClusterSecret}
        - Name: HTTPS_PROXY
          Value:
            Fn::ImportValue:
              Fn::Sub: ${VpcName}ProxyUrl
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
        - Name: CLUSTER_GROUP_NAME
          Value:
            Ref: ApplicationCluster
        - Name: CLUSTER_AWS_ENABLED
          Value: 'true'
        - Name: CLUSTER_AWS_REGION
          Value:
            Ref: AWS::Region
        - Name: CLUSTER_AWS_IAM_ROLE
          Value: DEFAULT
        - Name: CLUSTER_AWS_TAG_KEY
          Value: hazelcast:group
        - Name: CLUSTER_AWS_TAG_VALUE
          Value:
            Ref: ApplicationCluster
        - Name: JAVA_TOOL_OPTIONS
          Value:
            Fn::Join:
            - ''
            - - ' -Xmx672m -XX:MaxMetaspaceSize=128m'
              - ' -Dhttp.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttp.proxyPort=3128'
              - ' -Dhttps.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttps.proxyPort=3128'
              - ' -Dhttp.nonProxyHosts=''*.'
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}VpcDomain
              - '|169.254.*|localhost|127.*|[::1]'''
        Image:
          Fn::Sub: ${MicrotraderImage}/microtrader-portfolio:${MicrotraderImageTag}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/PortfolioService/portfolio
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker
        Memory: 800
        MemoryReservation: 195
        Name: portfolio
        PortMappings:
        - ContainerPort: 15703
      NetworkMode: host
      TaskRoleArn:
        Fn::Sub: ${SecretsTaskDefRole.Arn}
    Type: AWS::ECS::TaskDefinition
  PublicLoadBalancer:
    Properties:
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: 'false'
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Scheme: internet-facing
      SecurityGroups:
      - Ref: PublicLoadBalancerSecurityGroup
      Subnets:
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}PublicSubnetA
      - Fn::ImportValue:
          Fn::Sub: ${VpcName}PublicSubnetB
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-PublicLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  PublicLoadBalancerHttpListener:
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: DashboardServiceTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: PublicLoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  PublicLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Public Load Balancer Security Group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-PublicLoadBalancerSecurityGroup
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
    Type: AWS::EC2::SecurityGroup
  PublicLoadBalancerToMicrotraderDashboardEgress:
    Properties:
      DestinationSecurityGroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      FromPort:
        Ref: MicrotraderDashboardHttpPort
      GroupId:
        Ref: PublicLoadBalancerSecurityGroup
      IpProtocol: tcp
      ToPort:
        Ref: MicrotraderDashboardHttpPort
    Type: AWS::EC2::SecurityGroupEgress
  PublicLoadBalancerToMicrotraderDashboardIngress:
    Properties:
      FromPort:
        Ref: MicrotraderDashboardHttpPort
      GroupId:
        Ref: ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: PublicLoadBalancerSecurityGroup
      ToPort:
        Ref: MicrotraderDashboardHttpPort
    Type: AWS::EC2::SecurityGroupIngress
  QuoteService:
    DependsOn:
    - ApplicationAutoscaling
    - QuoteServiceLogGroup
    - ApplicationLoadBalancerHttpListener
    Properties:
      Cluster:
        Ref: ApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: quote
        ContainerPort:
          Ref: MicrotraderQuoteHttpPort
        TargetGroupArn:
          Ref: QuoteServiceTargetGroup
      Role:
        Ref: EcsServiceRole
      TaskDefinition:
        Ref: QuoteTaskDefinition
    Type: AWS::ECS::Service
  QuoteServiceLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/QuoteService/quote
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  QuoteServiceTargetGroup:
    Properties:
      HealthCheckPath: /quote/
      Port:
        Ref: MicrotraderQuoteHttpPort
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 30
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  QuoteTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - java
        - -jar
        - /app/app.jar
        - -server
        - -cluster
        - -Dvertx.hazelcast.config=/app/conf/cluster.xml
        - -cluster-port=15701
        Cpu: 200
        Environment:
        - Name: HTTP_PORT
          Value:
            Ref: MicrotraderQuoteHttpPort
        - Name: HTTP_ROOT
          Value: /quote/
        - Name: HTTP_HOST
          Value:
            Ref: ApplicationDnsRecord
        - Name: HTTP_PUBLIC_PORT
          Value: 80
        - Name: CLUSTER_AWS_ENABLED
          Value: 'true'
        - Name: CLUSTER_AWS_REGION
          Value:
            Ref: AWS::Region
        - Name: CLUSTER_AWS_IAM_ROLE
          Value: DEFAULT
        - Name: CLUSTER_AWS_TAG_KEY
          Value: hazelcast:group
        - Name: CLUSTER_AWS_TAG_VALUE
          Value:
            Ref: ApplicationCluster
        - Name: SSM_SECRETS
          Value:
            Fn::Sub: /${AWS::StackName}/cluster/password
        - Name: SSM_VERSIONS
          Value:
            Fn::Sub: ${ClusterSecret}
        - Name: HTTPS_PROXY
          Value:
            Fn::ImportValue:
              Fn::Sub: ${VpcName}ProxyUrl
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
        - Name: CLUSTER_GROUP_NAME
          Value:
            Ref: ApplicationCluster
        - Name: JAVA_TOOL_OPTIONS
          Value:
            Fn::Join:
            - ''
            - - ' -Xmx672m -XX:MaxMetaspaceSize=128m'
              - ' -Dhttp.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttp.proxyPort=3128'
              - ' -Dhttps.proxyHost='
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}ProxyHost
              - ' -Dhttps.proxyPort=3128'
              - ' -Dhttp.nonProxyHosts=''*.'
              - Fn::ImportValue:
                  Fn::Sub: ${VpcName}VpcDomain
              - '|169.254.*|localhost|127.*|[::1]'''
        Image:
          Fn::Sub: ${MicrotraderImage}/microtrader-quote:${MicrotraderImageTag}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/QuoteService/quote
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker
        Memory: 800
        MemoryReservation: 195
        Name: quote
        PortMappings:
        - ContainerPort:
            Ref: MicrotraderQuoteHttpPort
        - ContainerPort: 15701
      NetworkMode: host
      TaskRoleArn:
        Fn::Sub: ${SecretsTaskDefRole.Arn}
    Type: AWS::ECS::TaskDefinition
  SecretsProvisioner:
    DependsOn:
    - SecretsProvisionerLogGroup
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: ${AWS::AccountId}-cfnlambda
        S3Key: secretsProvisioner.zip
      Description:
        Fn::Sub: ${AWS::StackName} Secrets Provisioner
      FunctionName:
        Fn::Sub: ${AWS::StackName}-secretsProvisioner
      Handler: secrets_provisioner.handler
      MemorySize: 128
      Role:
        Fn::Sub: ${SecretsProvisionerRole.Arn}
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Lambda::Function
  SecretsProvisionerLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-SecretsProvisioner
      RetentionInDays:
        Ref: LogRetention
    Type: AWS::Logs::LogGroup
  SecretsProvisionerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ssm:DescribeParameters
            - ssm:PutParameter
            - ssm:DeleteParameter
            - ssm:GetParameters
            - ssm:AddTagsToResource
            - ssm:ListTagsForResource
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*
            Sid: SecretsProvision
          - Action:
            - kms:Decrypt
            - kms:Encrypt
            Effect: Allow
            Resource:
              Fn::ImportValue: CfnMasterKeyArn
            Sid: Encrpyt
          - Action:
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Sub: ${SecretsProvisionerLogGroup.Arn}
            Sid: ManagedLambdaLogs
          Version: '2012-10-17'
        PolicyName: SecretsProvisionerPermission
    Type: AWS::IAM::Role
  SecretsTaskDefRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ssm:GetParameters
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*
          - Action:
            - kms:Decrypt
            Effect: Allow
            Resource:
              Fn::ImportValue: CfnMasterKeyArn
          Version: '2012-10-17'
        PolicyName: SSMsecrets
    Type: AWS::IAM::Role
